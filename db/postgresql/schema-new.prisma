generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                      Int               @id @default(autoincrement()) @map("user_id")
  username                String            @unique @db.VarChar(255)
  password                String            @db.VarChar(60)
  // MIGRATE:  TO ROLE
  is_admin                Boolean           @default(false) @map("is_admin")
  createdAt               DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  accountUuid             String            @map("account_uuid") @db.Uuid
  createdById             Int               @map("created_by_id")
  updatedById             Int?              @map("updated_by_id")
  isDeleted               Boolean           @default(false) @map("is_deleted")
  createdByAccount        account           @relation(name: "CreatedByAccount", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_account_id_fk")
  updatedByAccount        account?          @relation(name: "UpdatedByAccount", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_account_id_fk_2")
  teamAccounts            teamAccount[]     @relation(name: "TeamAccounts")
  accountSources          accountSource[]   @relation(name: "AccountSources")
  accountRoles            accountRole[]     @relation(name: "AccountRoles")
  groupAccounts           groupAccount[]    @relation(name: "GroupAccounts")
  createdGroups           group[]           @relation(name: "CreatedGroups")
  updatedGroups           group[]           @relation(name: "UpdatedGroups")
  createdGroupRoles       groupRole[]       @relation(name: "CreatedGroupRoles")
  updatedGroupRoles       groupRole[]       @relation(name: "UpdatedGroupRoles")
  createdGroupSources     groupSource[]     @relation(name: "CreatedGroupSources")
  updatedGroupSources     groupSource[]     @relation(name: "UpdatedGroupSources")
  createdGroupSourceRoles groupSourceRole[] @relation(name: "CreatedGroupSourceRoles")
  updatedGroupSourceRoles groupSourceRole[] @relation(name: "UpdatedGroupSourceRoles")
  createdGroupAccounts    groupAccount[]    @relation(name: "CreatedGroupAccounts")
  updatedGroupAccounts    groupAccount[]    @relation(name: "UpdatedGroupAccounts")
  createdPermissions      permission[]      @relation(name: "CreatedPermissions")
  updatedPermissions      permission[]      @relation(name: "UpdatedPermissions")
  createdRoles            role[]            @relation(name: "CreatedRoles")
  updatedRoles            role[]            @relation(name: "UpdatedRoles")
  createdWebsites         website[]         @relation(name: "CreatedWebsites")
  updatedebsites          website[]         @relation(name: "UpdatedWebsites")
  createdTeams            team[]            @relation(name: "CreatedTeams")
  updatedTeams            team[]            @relation(name: "UpdatedTeams")
  createdTeamSources      teamSource[]      @relation(name: "CreatedTeamSources")
  updatedTeamSources      teamSource[]      @relation(name: "UpdatedTeamSources")
  createdTeamAccounts     teamAccount[]     @relation(name: "CreatedTeamAccounts")
  updatedTeamAccounts     teamAccount[]     @relation(name: "UpdatedTeamAccounts")
  createdAccounts         account[]         @relation(name: "CreatedByAccount")
  updatedAccounts         account[]         @relation(name: "UpdatedByAccount")
  createdAccountRoles     accountRole[]     @relation(name: "CreatedAccountRoles")
  updatedAccountRoles     accountRole[]     @relation(name: "UpdatedAccountRoles")
  createdaccountSources   accountSource[]   @relation(name: "CreatedaccountSources")
  updatedAccountSources   accountSource[]   @relation(name: "UpdatedAccountSources")
  website                 website[]
}

model event {
  id            Int        @id() @unique() @default(autoincrement()) @map("event_id")
  websiteId     Int        @map("website_id")
  sessionId     Int        @map("session_id")
  createdAt     DateTime?  @map("created_at") @db.Timestamptz(6)
  url           String     @db.VarChar(500)
  event_name    String     @db.VarChar(50)
  isDeleted     Boolean    @default(false) @map("is_deleted")
  session       session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  website       website    @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  eventMetadata eventData?

  @@index([createdAt])
  @@index([sessionId])
  @@index([websiteId])
}

model eventData {
  id        Int   @id @default(autoincrement()) @map("event_data_id")
  eventId   Int   @unique @map("event_id")
  eventData Json  @map("event_data")
  event     event @relation(fields: [eventId], references: [id])

  @@map("event_data")
}

model pageview {
  id        Int       @id @default(autoincrement()) @map("view_id")
  websiteId Int       @map("website_id")
  sessionId Int       @map("session_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  url       String    @db.VarChar(500)
  referrer  String?   @db.VarChar(500)
  session   session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  website   website   @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([sessionId])
  @@index([websiteId, createdAt])
  @@index([websiteId])
  @@index([websiteId, sessionId, createdAt])
}

model session {
  id          Int        @id @default(autoincrement()) @map("session_id")
  sessionUuid String     @map("session_uuid") @db.Uuid
  websiteId   Int        @map("website_id")
  createdAt   DateTime?  @map("created_at") @db.Timestamptz(6)
  hostname    String?    @db.VarChar(100)
  browser     String?    @db.VarChar(20)
  os          String?    @db.VarChar(20)
  device      String?    @db.VarChar(20)
  screen      String?    @db.VarChar(11)
  language    String?    @db.VarChar(35)
  country     String?    @db.Char(2)
  website     website?   @relation(fields: [websiteId], references: [id])
  events      event[]
  pageview    pageview[]

  @@index([createdAt])
  @@index([websiteId])
}

model website {
  id          Int       @id @default(autoincrement()) @map("website_id")
  websiteUuid String    @unique @map("website_uuid") @db.Uuid
  // MIGRATE:  TO account website
  userId      Int       @map("user_id")
  name        String    @db.VarChar(100)
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  domain      String?   @db.VarChar(500)
  shareId     String?   @unique(map: "website_share_id_idx") @map("share_id") @db.VarChar(64)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  account          account         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdByAccount account         @relation(name: "CreatedWebsites", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "source_account_id_fk")
  updatedByAccount account?        @relation(name: "UpdatedWebsites", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "source_account_id_fk_2")
  events           event[]
  groupSources     groupSource[]
  teamSources      teamSource[]
  accountSources   accountSource[]
  pageview         pageview[]
  session          session[]

  @@index([userId])
}

model group {
  id          Int       @id() @unique() @default(autoincrement())
  name        String    @unique() @db.VarChar(255)
  description String?   @db.VarChar(255)
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account        @relation(name: "CreatedGroups", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_id_fk")
  updatedByAccount account?       @relation(name: "UpdatedGroups", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_id_fk_2")
  groupRoles       groupRole[]
  groupSources     groupSource[]
  groupAccounts    groupAccount[]
  roles            role[]
}

model groupRole {
  id          Int       @id() @unique() @default(autoincrement())
  group_id    Int
  role_id     Int
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedGroupRoles", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_role_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedGroupRoles", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_role_account_id_fk_2")
  group            group    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_role_group_id_fk_3")
  role             role     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_role_role_id_fk")

  @@map("group_role")
}

model groupSource {
  id          Int       @id() @unique() @default(autoincrement())
  groupId     Int       @map("group_id")
  websiteId   Int       @map("website_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account           @relation(name: "CreatedGroupSources", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_id_fk")
  updatedByAccount account?          @relation(name: "UpdatedGroupSources", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_id_fk_2")
  group            group             @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_group_id_fk")
  website          website           @relation(fields: [websiteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_website_id_fk")
  groupSourceRoles groupSourceRole[]

  @@map("group_source")
}

model groupSourceRole {
  id             Int       @id() @unique() @default(autoincrement())
  groupWebsiteId Int       @map("group_website_id")
  roleId         Int       @map("role_id")
  createdAt      DateTime? @map("created_at") @db.Timestamptz(6)
  createdById    Int       @map("created_by_id")
  updatedAt      DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById    Int?      @map("updated_by_id")
  isDeleted      Boolean   @default(false) @map("is_deleted")

  createdByAccount account     @relation(name: "CreatedGroupSourceRoles", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_role_account_id_fk")
  updatedByAccount account?    @relation(name: "UpdatedGroupSourceRoles", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_role_account_id_fk_2")
  groupSources     groupSource @relation(fields: [groupWebsiteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_role_group_website_id_fk")
  role             role        @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_source_role_role_id_fk")

  @@map("group_source_role")
}

model groupAccount {
  id          Int       @id() @unique() @default(autoincrement())
  groupId     Int       @map("group_id")
  accountId   Int       @map("account_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedGroupAccounts", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedGroupAccounts", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_account_id_fk_2")
  group            group    @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_group_id_fk")
  account          account  @relation(name: "GroupAccounts", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "group_account_account_id_fk_3")

  @@map("group_account")
}

model permission {
  id          Int       @id() @unique() @default(autoincrement())
  name        String    @unique() @db.VarChar(255)
  description String?   @db.VarChar(255)
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedPermissions", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permission_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedPermissions", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permission_account_id_fk_2")
}

model role {
  id          Int       @id() @unique() @default(autoincrement())
  name        String    @unique(map: "role_name_uindex") @db.VarChar(255)
  description String?   @db.VarChar(255)
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account           @relation(name: "CreatedRoles", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_account_id_fk")
  updatedByAccount account?          @relation(name: "UpdatedRoles", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_account_id_fk_2")
  groupRoles       groupRole[]
  groupSourceRoles groupSourceRole[]
  group            group?            @relation(fields: [groupId], references: [id])
  groupId          Int?
  accountRoles     accountRole[]
}

model team {
  id          Int       @id() @unique() @default(autoincrement())
  teamUuid    String    @unique(map: "team_team_uuid_uindex") @map("team_uuid") @db.Uuid
  name        String    @unique(map: "team_name_uindex") @db.VarChar(50)
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account       @relation(name: "CreatedTeams", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk")
  updatedByAccount account?      @relation(name: "UpdatedTeams", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk_2")
  teamSources      teamSource[]
  teamAccounts     teamAccount[]
}

model teamSource {
  id          Int       @id() @unique() @default(autoincrement())
  teamId      Int       @map("team_id")
  websiteId   Int       @map("website_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedTeamSources", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedTeamSources", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk_2")
  website          website  @relation(fields: [websiteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_source_website_id_fk")
  team             team     @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_source_team_id_fk")

  @@map("team_source")
}

model teamAccount {
  id          Int       @id() @unique() @default(autoincrement())
  teamId      Int       @map("team_id")
  accountId   Int       @map("account_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedTeamAccounts", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedTeamAccounts", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_account_id_fk_2")
  team             team     @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_team_id_fk")
  account          account  @relation(name: "TeamAccounts", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_account_id_fk_3")

  @@map("team_account")
}

model accountRole {
  id          Int       @id() @unique() @default(autoincrement())
  roleId      Int       @map("role_id")
  accountId   Int       @map("account_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedAccountRoles", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_role_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedAccountRoles", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_role_account_id_fk_2")
  role             role     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_role_role_id_fk")
  account          account  @relation(name: "AccountRoles", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_role_account_id_fk_3")

  @@map("account_role")
}

model accountSource {
  id          Int       @id() @unique() @default(autoincrement())
  accountId   Int       @map("account_id")
  websiteId   Int       @map("website_id")
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdById Int       @map("created_by_id")
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)
  updatedById Int?      @map("updated_by_id")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  createdByAccount account  @relation(name: "CreatedaccountSources", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk")
  updatedByAccount account? @relation(name: "UpdatedAccountSources", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_account_id_fk_2")
  website          website  @relation(fields: [websiteId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_source_website_id_fk")
  account          account  @relation(name: "AccountSources", fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_source_account_id_fk")

  @@map("account_source")
}
